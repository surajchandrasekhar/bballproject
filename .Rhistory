shinyUI(navbarPage('NBA Statistics',
# Create a tab panel for your map
tabPanel('Leading Scorer',
titlePanel("How Important is the Leading Scorer's efficiency for a team to win games?"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('year1', label = 'Select Which Season To Look At:',
choices = list("06-07" = '06-07',
"07-08" = '07-08',
"08-09" = '08-09',
"09-10" = '09-10',
"10-11" = '10-11',
"11-12" = '11-12',
"12-13" = '12-13',
"13-14" = '13-14',
"14-15" = '14-15',
"15-16" = '15-16')
),
selectInput('statvar', label = 'Which Efficiency Stat Do You Want to compare with:',
choices = list("Field Goal %" = 'FG.',
"3 Point %" = 'X3P.',
"Effective Field Goal %" = 'eFG.',
"True Shooting %" = 'TS.',
"Usage Rate" = 'USG.',
"Value Over Replacement Player (VORP)" = 'VORP',
"Player Efficiency Rating (PER)" = 'PER'))
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('scatter1')
)
)
),
tabPanel('Team Data',
titlePanel('Is Offense or Defense more important to a Teams Success?'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('year2', label = 'Select Which Season To Look At:',
choices = list("06-07" = '06-07',
"07-08" = '07-08',
"08-09" = '08-09',
"09-10" = '09-10',
"10-11" = '10-11',
"11-12" = '11-12',
"12-13" = '12-13',
"13-14" = '13-14',
"14-15" = '14-15',
"15-16" = '15-16')
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('scatter2')
)
)
),
# Create a tabPanel to show your scatter plot
tabPanel('Defense',
# Add a titlePanel to your tab
titlePanel('Does Blocks Or Steals Make you an Effective Defender'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput('year3', label = 'Select Which Season To Look At:',
choices = list("06-07" = '06-07',
"07-08" = '07-08',
"08-09" = '08-09',
"09-10" = '09-10',
"10-11" = '10-11',
"11-12" = '11-12',
"12-13" = '12-13',
"13-14" = '13-14',
"14-15" = '14-15',
"15-16" = '15-16')
),
radioButtons('dstat',
label="Choose a Defensive Statistic",
choices = list("Steals" = 'STL',
"Blocks" =  'BLK')
),
textInput('search', label = 'Choose a Player', value='')
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter3')
)
)
)
))
library(dplyr)
library(shiny)
library(plotly)
shinyUI(navbarPage('NBA Statistics',
# Create a tab panel for your map
tabPanel('Leading Scorer',
titlePanel("How Important is the Leading Scorer's efficiency for a team to win games?"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('year1', label = 'Select Which Season To Look At:',
choices = list("06-07" = '06-07',
"07-08" = '07-08',
"08-09" = '08-09',
"09-10" = '09-10',
"10-11" = '10-11',
"11-12" = '11-12',
"12-13" = '12-13',
"13-14" = '13-14',
"14-15" = '14-15',
"15-16" = '15-16')
),
selectInput('statvar', label = 'Which Efficiency Stat Do You Want to compare with:',
choices = list("Field Goal %" = 'FG.',
"3 Point %" = 'X3P.',
"Effective Field Goal %" = 'eFG.',
"True Shooting %" = 'TS.',
"Usage Rate" = 'USG.',
"Value Over Replacement Player (VORP)" = 'VORP',
"Player Efficiency Rating (PER)" = 'PER'))
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('scatter1')
)
)
),
tabPanel('Team Data',
titlePanel('Is Offense or Defense more important to a Teams Success?'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('year2', label = 'Select Which Season To Look At:',
choices = list("06-07" = '06-07',
"07-08" = '07-08',
"08-09" = '08-09',
"09-10" = '09-10',
"10-11" = '10-11',
"11-12" = '11-12',
"12-13" = '12-13',
"13-14" = '13-14',
"14-15" = '14-15',
"15-16" = '15-16')
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('scatter2')
)
)
),
# Create a tabPanel to show your scatter plot
tabPanel('Defense',
# Add a titlePanel to your tab
titlePanel('Does Blocks Or Steals Make you an Effective Defender'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput('year3', label = 'Select Which Season To Look At:',
choices = list("06-07" = '06-07',
"07-08" = '07-08',
"08-09" = '08-09',
"09-10" = '09-10',
"10-11" = '10-11',
"11-12" = '11-12',
"12-13" = '12-13',
"13-14" = '13-14',
"14-15" = '14-15',
"15-16" = '15-16')
),
radioButtons('dstat',
label="Choose a Defensive Statistic",
choices = list("Steals" = 'STL',
"Blocks" =  'BLK')
),
textInput('search', label = 'Choose a Player', value='')
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter3')
)
)
)
)))
library(dplyr)
library(shiny)
library(plotly)
shinyUI(navbarPage('NBA Statistics',
# Create a tab panel for your map
tabPanel('Leading Scorer',
titlePanel("How Important is the Leading Scorer's efficiency for a team to win games?"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('year1', label = 'Select Which Season To Look At:',
choices = list("06-07" = '06-07',
"07-08" = '07-08',
"08-09" = '08-09',
"09-10" = '09-10',
"10-11" = '10-11',
"11-12" = '11-12',
"12-13" = '12-13',
"13-14" = '13-14',
"14-15" = '14-15',
"15-16" = '15-16')
),
selectInput('statvar', label = 'Which Efficiency Stat Do You Want to compare with:',
choices = list("Field Goal %" = 'FG.',
"3 Point %" = 'X3P.',
"Effective Field Goal %" = 'eFG.',
"True Shooting %" = 'TS.',
"Usage Rate" = 'USG.',
"Value Over Replacement Player (VORP)" = 'VORP',
"Player Efficiency Rating (PER)" = 'PER'))
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('scatter1')
)
)
),
tabPanel('Team Data',
titlePanel('Is Offense or Defense more important to a Teams Success?'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput('year2', label = 'Select Which Season To Look At:',
choices = list("06-07" = '06-07',
"07-08" = '07-08',
"08-09" = '08-09',
"09-10" = '09-10',
"10-11" = '10-11',
"11-12" = '11-12',
"12-13" = '12-13',
"13-14" = '13-14',
"14-15" = '14-15',
"15-16" = '15-16')
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput('scatter2')
)
)
),
# Create a tabPanel to show your scatter plot
tabPanel('Defense',
# Add a titlePanel to your tab
titlePanel('Does Blocks Or Steals Make you an Effective Defender'),
# Create a sidebar layout for this tab (page)
sidebarLayout(
# Create a sidebarPanel for your controls
sidebarPanel(
# Make a textInput widget for searching for a state in your scatter plot
selectInput('year3', label = 'Select Which Season To Look At:',
choices = list("06-07" = '06-07',
"07-08" = '07-08',
"08-09" = '08-09',
"09-10" = '09-10',
"10-11" = '10-11',
"11-12" = '11-12',
"12-13" = '12-13',
"13-14" = '13-14',
"14-15" = '14-15',
"15-16" = '15-16')
),
radioButtons('dstat',
label="Choose a Defensive Statistic",
choices = list("Steals" = 'STL',
"Blocks" =  'BLK')
),
textInput('search', label = 'Choose a Player', value='')
),
# Create a main panel, in which you should display your plotly Scatter plot
mainPanel(
plotlyOutput('scatter3')
)
)
)
))
# Jo Narvaez-Jensen
# Tech Team
# Using the Stats: Blocks, Steals vs Defensive Win Share (DWS); build a function that
# accepts a ShinyUI input and returns a plot based on the user selected stat vs
# DWS, each point on hover displays the following info: player, team, steal, block,
# and DWS.
# Original Notes:
#Create scatter plot That shows players basic defensive stats vs the advanced defensive stats to show if steals or blocks constitutes a good defender
#Create function BuildGraph3 with 3 parameters: the data set, the value of the radio button, and the minimum value
#Create plotly scatter plot with the radio button inputed value in x and defensive box plus-minus as y, with the size of the plot
#points as the defensive win shares
# display necesssary information when it hovers, such as Player Name, Defensive box-plus minus, defensive win shares, blocks, and steals
# display information such that only players that have more steals or blocks than the slider value will be displayed.
# Libraries
library(shiny)
library(dplyr)
library(plotly)
# Create Overall Defensive Data Set
# Function to create scatter plot based on block or steal vs defensive win share
BuildGraph3 <- function(dataset, dstat, search){
# Create Data Frame limtied to user selected stat
x.equation = paste0("~",dstat)
dataset <- filter(dataset, MP.x >= 20.0)
newdata <- dataset %>% filter(grepl(search, Player))
# Create a scatter plot of selected stat
p <- plot_ly(
newdata,
x = eval(parse(text = x.equation)),
y = ~DBPM,
size=~DWS,
color = ~Tm, type = 'scatter',
opacity = 0.5,
sizes=c(10,300),
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
return (p)
}
runApp()
runApp()
# Jo Narvaez-Jensen
# Tech Team
# Using the Stats: Blocks, Steals vs Defensive Win Share (DWS); build a function that
# accepts a ShinyUI input and returns a plot based on the user selected stat vs
# DWS, each point on hover displays the following info: player, team, steal, block,
# and DWS.
# Original Notes:
#Create scatter plot That shows players basic defensive stats vs the advanced defensive stats to show if steals or blocks constitutes a good defender
#Create function BuildGraph3 with 3 parameters: the data set, the value of the radio button, and the minimum value
#Create plotly scatter plot with the radio button inputed value in x and defensive box plus-minus as y, with the size of the plot
#points as the defensive win shares
# display necesssary information when it hovers, such as Player Name, Defensive box-plus minus, defensive win shares, blocks, and steals
# display information such that only players that have more steals or blocks than the slider value will be displayed.
# Libraries
library(shiny)
library(dplyr)
library(plotly)
# Create Overall Defensive Data Set
# Function to create scatter plot based on block or steal vs defensive win share
BuildGraph3 <- function(dataset, dstat, search){
# Create Data Frame limtied to user selected stat
x.equation = paste0("~",dstat)
dataset <- filter(dataset, MP.x >= 20.0)
newdata <- dataset %>% filter(grepl(paste0("^",search), Player))
# Create a scatter plot of selected stat
p <- plot_ly(
newdata,
x = eval(parse(text = x.equation)),
y = ~DBPM,
size=~DWS,
color = ~Tm, type = 'scatter',
opacity = 0.5,
sizes=c(10,300),
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
return (p)
}
runApp()
# Jo Narvaez-Jensen
# Tech Team
# Using the Stats: Blocks, Steals vs Defensive Win Share (DWS); build a function that
# accepts a ShinyUI input and returns a plot based on the user selected stat vs
# DWS, each point on hover displays the following info: player, team, steal, block,
# and DWS.
# Original Notes:
#Create scatter plot That shows players basic defensive stats vs the advanced defensive stats to show if steals or blocks constitutes a good defender
#Create function BuildGraph3 with 3 parameters: the data set, the value of the radio button, and the minimum value
#Create plotly scatter plot with the radio button inputed value in x and defensive box plus-minus as y, with the size of the plot
#points as the defensive win shares
# display necesssary information when it hovers, such as Player Name, Defensive box-plus minus, defensive win shares, blocks, and steals
# display information such that only players that have more steals or blocks than the slider value will be displayed.
# Libraries
library(shiny)
library(dplyr)
library(plotly)
# Create Overall Defensive Data Set
# Function to create scatter plot based on block or steal vs defensive win share
BuildGraph3 <- function(dataset, dstat, search){
# Create Data Frame limtied to user selected stat
x.equation = paste0("~",dstat)
dataset <- filter(dataset, MP.x >= 20.0)
newdata <- dataset %>% filter(grepl(paste0("^",search), Player))
# Create a scatter plot of selected stat
p <- plot_ly(
newdata,
x = eval(parse(text = x.equation)),
y = ~DBPM,
size=~DWS,
color = ~Tm, type = 'scatter',
opacity = 0.5,
sizes=c(10,50),
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
return (p)
}
runApp()
# Jo Narvaez-Jensen
# Tech Team
# Using the Stats: Blocks, Steals vs Defensive Win Share (DWS); build a function that
# accepts a ShinyUI input and returns a plot based on the user selected stat vs
# DWS, each point on hover displays the following info: player, team, steal, block,
# and DWS.
# Original Notes:
#Create scatter plot That shows players basic defensive stats vs the advanced defensive stats to show if steals or blocks constitutes a good defender
#Create function BuildGraph3 with 3 parameters: the data set, the value of the radio button, and the minimum value
#Create plotly scatter plot with the radio button inputed value in x and defensive box plus-minus as y, with the size of the plot
#points as the defensive win shares
# display necesssary information when it hovers, such as Player Name, Defensive box-plus minus, defensive win shares, blocks, and steals
# display information such that only players that have more steals or blocks than the slider value will be displayed.
# Libraries
library(shiny)
library(dplyr)
library(plotly)
# Create Overall Defensive Data Set
# Function to create scatter plot based on block or steal vs defensive win share
BuildGraph3 <- function(dataset, dstat, search){
# Create Data Frame limtied to user selected stat
x.equation = paste0("~",dstat)
dataset <- filter(dataset, MP.x >= 20.0)
newdata <- dataset %>% filter(grepl(paste0("^",search), Player))
# Create a scatter plot of selected stat
p <- plot_ly(
newdata,
x = eval(parse(text = x.equation)),
y = ~DBPM,
size=~DWS,
color = ~Tm, type = 'scatter',
opacity = 0.5,
sizes=c(10,100),
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
return (p)
}
runApp()
# Jo Narvaez-Jensen
# Tech Team
# Using the Stats: Blocks, Steals vs Defensive Win Share (DWS); build a function that
# accepts a ShinyUI input and returns a plot based on the user selected stat vs
# DWS, each point on hover displays the following info: player, team, steal, block,
# and DWS.
# Original Notes:
#Create scatter plot That shows players basic defensive stats vs the advanced defensive stats to show if steals or blocks constitutes a good defender
#Create function BuildGraph3 with 3 parameters: the data set, the value of the radio button, and the minimum value
#Create plotly scatter plot with the radio button inputed value in x and defensive box plus-minus as y, with the size of the plot
#points as the defensive win shares
# display necesssary information when it hovers, such as Player Name, Defensive box-plus minus, defensive win shares, blocks, and steals
# display information such that only players that have more steals or blocks than the slider value will be displayed.
# Libraries
library(shiny)
library(dplyr)
library(plotly)
# Create Overall Defensive Data Set
# Function to create scatter plot based on block or steal vs defensive win share
BuildGraph3 <- function(dataset, dstat, psearch, tsearch){
# Create Data Frame limtied to user selected stat
x.equation = paste0("~",dstat)
dataset <- filter(dataset, MP.x >= 20.0)
newdata <- dataset %>% filter(grepl(paste0("^",psearch), Player))
newdata <- dataset %>% filter(grepl(paste0("^",tsearch), Tm))
# Create a scatter plot of selected stat
p <- plot_ly(
newdata,
x = eval(parse(text = x.equation)),
y = ~DBPM,
size=~DWS,
color = ~Tm, type = 'scatter',
opacity = 0.5,
sizes=c(10,100),
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Block: ', BLK,
'</br> Defensive Share: ', DWS)
)
return (p)
}
runApp()
