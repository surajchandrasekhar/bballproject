library(rpart)
install.packages('rpart')
install.packages("rpart")
library(rpart)
homes <- read.csv('part_1_data.csv')
homes
version
R.version()
R.version ()
setwd("~/Desktop/info201/bballproject")
shiny::runApp()
BuildGraph2 <- function(year2, search = "") {
team.stats <- paste0("./data/","2015-16","team.csv")
dataset <- read.csv(team.stats)
dataset <- dataset %>% filter(grepl(search, Team))
x.equation <- paste0("~", "ORtg")
y.equation <- paste0("~", "DRtg")
graph <- plot_ly(
data=dataset,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
color = "blue", size = ~W, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Team Name: ', Team,
'</br> Offensive Rating: ', ORtg,
'</br> Deffensive Rating: ', DRtg,
'</br> Wins: ', W)
)
return (graph)
}
runApp()
BuildGraph2 <- function(year2, search = "") {
team.stats <- paste0("./data/","2015-16","team.csv")
dataset <- read.csv(team.stats)
dataset <- dataset %>% filter(grepl(search, Team))
x.equation <- paste0("~", "ORtg")
y.equation <- paste0("~", "DRtg")
graph <- plot_ly(
data=dataset,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
color = ~Tm, size = ~W*0.1, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Team Name: ', Team,
'</br> Offensive Rating: ', ORtg,
'</br> Deffensive Rating: ', DRtg,
'</br> Wins: ', W)
)
return (graph)
}
runApp()
graph <- plot_ly(
data=dataset,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
color = ~Tm, size = ~W, opacity = 0.5, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Team Name: ', Team,
'</br> Offensive Rating: ', ORtg,
'</br> Deffensive Rating: ', DRtg,
'</br> Wins: ', W)
)
runApp()
graph <- plot_ly(
data=dataset,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
color = ~Tm, size = ~W, opacity = 0.5,
type = 'scatter', sizes = c(10, 50),
mode = 'markers', hoverinfo = 'text',
text = ~paste('Team Name: ', Team,
'</br> Offensive Rating: ', ORtg,
'</br> Deffensive Rating: ', DRtg,
'</br> Wins: ', W)
)
runApp()
graph <- plot_ly(
data=dataset,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
color = ~Tm, size = ~W, opacity = 0.5,
type = 'scatter', sizes = c(10, 30),
mode = 'markers', hoverinfo = 'text',
text = ~paste('Team Name: ', Team,
'</br> Offensive Rating: ', ORtg,
'</br> Deffensive Rating: ', DRtg,
'</br> Wins: ', W)
)
runApp()
p <- plot_ly(
newdata,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
color = ~Team, size = ~W, opacity = 0.5, sizes = c(10, 30),
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Team,
'</br> Points Per Game: ', PS.G,
'</br>', statvar,": ", eval(parse(text = statvar)),  #string literal
'</br> Wins: ', W)
)
runApp()
p <- plot_ly(
newdata,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
color = ~Team, size = ~W, opacity = 0.5, sizes = c(1, 30),
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Team,
'</br> Points Per Game: ', PS.G,
'</br>', statvar,": ", eval(parse(text = statvar)),  #string literal
'</br> Wins: ', W)
)
runApp()
x.equation = paste0("~","dstat")
y.equation = paste0("~",yvar)
dataset <- filter(dataset, dstat >= qty)
# Create a scatter plot of selected stat
p <- plot_ly(
dataset,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
size=~DWS,
color = ~Tm, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
runApp()
dataset <- filter(dataset, parse(eval(text = dstat)) >= qty)
runApp()
dataset <- filter(dataset, eval(parse(text = dstat)) >= qty)
runApp()
dataset <- filter(dataset, eval(parse(text = ~dstat)) >= qty)
runApp()
x.equation = paste0("~",dstat)
y.equation = paste0("~",yvar)
dataset <- filter(dataset, eval(parse(text = dstat)) >= qty)
runApp()
player.stats <- read.csv('./data/2015-16playerpergame.csv', stringsAsFactors = FALSE)
View(player.stats)
x.equation = paste0("~",dstat)
print(x.equation)
y.equation = paste0("~",yvar)
dataset <- filter(dataset, eval(parse(text = dstat)) >= qty)
runApp()
p <- plot_ly(
dataset,
x = dataset$eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
size=~DWS,
color = ~Tm, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
runApp()
dataset <- filter(dataset, eval(parse(text = dstat)) >= qty)
# Create a scatter plot of selected stat
p <- plot_ly(
dataset,
x = dataset$eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
size=~DWS,
color = ~Tm, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
runApp()
dataset <- filter(dataset, dstat >= qty)
# Create a scatter plot of selected stat
p <- plot_ly(
dataset,
x = dataset$eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
size=~DWS,
color = ~Tm, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
runApp()
player.joined <- left_join(player.stats,advanced.stats, by=c("Player", "Tm"))
player.stats <- read.csv('./data/2015-16playerpergame.csv', stringsAsFactors = FALSE)
advanced.stats <- read.csv('./data/2015-16advanced.csv', stringsAsFactors = FALSE)
team.stats <- read.csv('./data/2015-16team.csv', stringsAsFactors = FALSE)
player.joined <- left_join(player.stats,advanced.stats, by=c("Player", "Tm"))
full.joined <- left_join(player.joined,team.stats, by="Tm")
View(player.joined)
# Jo Narvaez-Jensen
# Tech Team
# Using the Stats: Blocks, Steals vs Defensive Win Share (DWS); build a function that
# accepts a ShinyUI input and returns a plot based on the user selected stat vs
# DWS, each point on hover displays the following info: player, team, steal, block,
# and DWS.
# Original Notes:
#Create scatter plot That shows players basic defensive stats vs the advanced defensive stats to show if steals or blocks constitutes a good defender
#Create function BuildGraph3 with 3 parameters: the data set, the value of the radio button, and the minimum value
#Create plotly scatter plot with the radio button inputed value in x and defensive box plus-minus as y, with the size of the plot
#points as the defensive win shares
# display necesssary information when it hovers, such as Player Name, Defensive box-plus minus, defensive win shares, blocks, and steals
# display information such that only players that have more steals or blocks than the slider value will be displayed.
# Libraries
library(shiny)
library(dplyr)
library(plotly)
# Create Overall Defensive Data Set
# Function to create scatter plot based on block or steal vs defensive win share
BuildGraph3 <- function(dataset, dstat, qty, yvar="DBPM"){
# Create Data Frame limtied to user selected stat
x.equation = paste0("~",dstat)
print(x.equation)
y.equation = paste0("~",yvar)
dataset <- filter(dataset, STL >= qty)
print(dataset)
# Create a scatter plot of selected stat
p <- plot_ly(
dataset,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
size=~DWS,
color = ~Tm, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
return (p)
}
runApp()
# Jo Narvaez-Jensen
# Tech Team
# Using the Stats: Blocks, Steals vs Defensive Win Share (DWS); build a function that
# accepts a ShinyUI input and returns a plot based on the user selected stat vs
# DWS, each point on hover displays the following info: player, team, steal, block,
# and DWS.
# Original Notes:
#Create scatter plot That shows players basic defensive stats vs the advanced defensive stats to show if steals or blocks constitutes a good defender
#Create function BuildGraph3 with 3 parameters: the data set, the value of the radio button, and the minimum value
#Create plotly scatter plot with the radio button inputed value in x and defensive box plus-minus as y, with the size of the plot
#points as the defensive win shares
# display necesssary information when it hovers, such as Player Name, Defensive box-plus minus, defensive win shares, blocks, and steals
# display information such that only players that have more steals or blocks than the slider value will be displayed.
# Libraries
library(shiny)
library(dplyr)
library(plotly)
# Create Overall Defensive Data Set
# Function to create scatter plot based on block or steal vs defensive win share
BuildGraph3 <- function(dataset, dstat, qty, yvar="DBPM"){
# Create Data Frame limtied to user selected stat
x.equation = paste0("~",dstat)
print(x.equation)
y.equation = paste0("~",yvar)
dataset <- filter_(dataset, ~dstat >= qty)
print(dataset)
# Create a scatter plot of selected stat
p <- plot_ly(
dataset,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
size=~DWS,
color = ~Tm, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
return (p)
}
runApp()
# Jo Narvaez-Jensen
# Tech Team
# Using the Stats: Blocks, Steals vs Defensive Win Share (DWS); build a function that
# accepts a ShinyUI input and returns a plot based on the user selected stat vs
# DWS, each point on hover displays the following info: player, team, steal, block,
# and DWS.
# Original Notes:
#Create scatter plot That shows players basic defensive stats vs the advanced defensive stats to show if steals or blocks constitutes a good defender
#Create function BuildGraph3 with 3 parameters: the data set, the value of the radio button, and the minimum value
#Create plotly scatter plot with the radio button inputed value in x and defensive box plus-minus as y, with the size of the plot
#points as the defensive win shares
# display necesssary information when it hovers, such as Player Name, Defensive box-plus minus, defensive win shares, blocks, and steals
# display information such that only players that have more steals or blocks than the slider value will be displayed.
# Libraries
library(shiny)
library(dplyr)
library(plotly)
# Create Overall Defensive Data Set
# Function to create scatter plot based on block or steal vs defensive win share
BuildGraph3 <- function(dataset, dstat, qty, yvar="DBPM"){
# Create Data Frame limtied to user selected stat
x.equation = paste0("~",dstat)
print(x.equation)
y.equation = paste0("~",yvar)
dataset <- filter_(dataset, ~dstat >= ~qty)
print(dataset)
# Create a scatter plot of selected stat
p <- plot_ly(
dataset,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
size=~DWS,
color = ~Tm, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
return (p)
}
runApp()
# Jo Narvaez-Jensen
# Tech Team
# Using the Stats: Blocks, Steals vs Defensive Win Share (DWS); build a function that
# accepts a ShinyUI input and returns a plot based on the user selected stat vs
# DWS, each point on hover displays the following info: player, team, steal, block,
# and DWS.
# Original Notes:
#Create scatter plot That shows players basic defensive stats vs the advanced defensive stats to show if steals or blocks constitutes a good defender
#Create function BuildGraph3 with 3 parameters: the data set, the value of the radio button, and the minimum value
#Create plotly scatter plot with the radio button inputed value in x and defensive box plus-minus as y, with the size of the plot
#points as the defensive win shares
# display necesssary information when it hovers, such as Player Name, Defensive box-plus minus, defensive win shares, blocks, and steals
# display information such that only players that have more steals or blocks than the slider value will be displayed.
# Libraries
library(shiny)
library(dplyr)
library(plotly)
# Create Overall Defensive Data Set
# Function to create scatter plot based on block or steal vs defensive win share
BuildGraph3 <- function(dataset, dstat, qty, yvar="DBPM"){
# Create Data Frame limtied to user selected stat
x.equation = paste0("~",dstat)
print(x.equation)
y.equation = paste0("~",yvar)
dataset <- filter_(dataset, ~dstat >= "qty")
print(dataset)
# Create a scatter plot of selected stat
p <- plot_ly(
dataset,
x = eval(parse(text = x.equation)),
y = eval(parse(text = y.equation)),
size=~DWS,
color = ~Tm, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Team: ', Tm,
'</br> Steal: ', STL,
'</br> Black: ', BLK,
'</br> Defensive Share: ', DWS)
)
return (p)
}
runApp()
