team <- read.csv('./data/2014-15team.csv', stringsAsFactors = FALSE)
setwd("~/Desktop/info201/bballproject/scripts")
setwd("~/Desktop/info201/bballproject")
team <- read.csv('./data/2014-15team.csv', stringsAsFactors = FALSE)
View(team)
shiny::runApp()
plot_ly(data=data, x = eval(parse(text = x.equation)),
q
# Get x and y max
xmax <- max(dataset[,ORtg]) * 1.5
ymax <- max(dataset[,DRtg]) * 1.5
x.equation <- paste0('~', ORtg)
setwd("~/Desktop/info201/bballproject")
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/info201/bballproject")
install.packages('shiny')
install.packages("shiny")
install.packages('plotly')
install.packages('dplyr')
shiny::runApp()
BuildGraph2 <- function(dataset, input) {
setwd("~/Desktop/info201/bballproject/scripts")
install.packages('plotly')
install.packages("plotly")
install.packages('stringr')
graph <- plot_ly(
dataset, x = ~dataset$ORtg, y = ~dataset$DRtg,
#Create scatter plot That shows teams success of offense vs defense
#Create scatter plot That shows teams success of offense vs defense
#Create function BuildGraph2 with 2 parameters: the data set and the search value
#Create plotly scatter plot with offensive rating in x and defensive rating as y, with the size of the plot points as the team wins
# display necesssary information when it hovers, such as team name, offensive rating, defensive rating, and team wins
# display information such that the user types in a fragment and plot will show all points that match what the user types in
library(plotly)
library(stringr)
BuildGraph2 <- function(dataset, input) {
data <- dataset %>% filter(grepl(input, Team))
graph <- plot_ly(
dataset, x = ~dataset$ORtg, y = ~dataset$DRtg,
color = ~Tm, size = ~W, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Team Name: ', Team,
'</br> Offensive Rating: ', ORtg,
'</br> Deffensive Rating: ', DRtg,
'</br> Wins: ', W)
)
return (graph)
}
#library(plotly)
#Create scatter plot That shows teams success of offense vs defense
#Create function BuildGraph2 with 2 parameters: the data set and the search value
#Create plotly scatter plot with offensive rating in x and defensive rating as y, with the size of the plot points as the team wins
# display necesssary information when it hovers, such as team name, offensive rating, defensive rating, and team wins
# display information such that the user types in a fragment and plot will show all points that match what the user types in
#library(plotly)
#library(stringr)
BuildGraph2 <- function(dataset, input) {
data <- dataset %>% filter(grepl(input, Team))
graph <- plot_ly(
dataset, x = ~dataset$ORtg, y = ~dataset$DRtg,
color = ~Tm, size = ~W, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Team Name: ', Team,
'</br> Offensive Rating: ', ORtg,
'</br> Deffensive Rating: ', DRtg,
'</br> Wins: ', W)
)
return (graph)
}
#Create scatter plot That shows teams success of offense vs defense
#Create function BuildGraph2 with 2 parameters: the data set and the search value
#Create plotly scatter plot with offensive rating in x and defensive rating as y, with the size of the plot points as the team wins
# display necesssary information when it hovers, such as team name, offensive rating, defensive rating, and team wins
# display information such that the user types in a fragment and plot will show all points that match what the user types in
#library(plotly)
#library(stringr)
BuildGraph2 <- function(dataset, input) {
data <- dataset %>% filter(grepl(input, Team))
graph <- plot_ly(
dataset, x = ~dataset$ORtg, y = ~dataset$DRtg,
color = ~Tm, size = ~W, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Team Name: ', Team,
'</br> Offensive Rating: ', ORtg,
'</br> Deffensive Rating: ', DRtg,
'</br> Wins: ', W)
)
return (graph)
}
shiny::runApp('~/Desktop/info201/bballproject')
runApp('~/Desktop/info201/bballproject')
#Create scatter plot That shows teams success of offense vs defense
#Create function BuildGraph2 with 2 parameters: the data set and the search value
#Create plotly scatter plot with offensive rating in x and defensive rating as y, with the size of the plot points as the team wins
# display necesssary information when it hovers, such as team name, offensive rating, defensive rating, and team wins
# display information such that the user types in a fragment and plot will show all points that match what the user types in
#library(plotly)
#library(stringr)
BuildGraph2 <- function(dataset, input) {
data <- dataset %>% filter(grepl(input, Team))
graph <- plot_ly(
dataset, x = ~dataset$ORtg, y = ~dataset$DRtg,
color = ~Tm, size = ~W, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Team Name: ', Team,
'</br> Offensive Rating: ', ORtg,
'</br> Deffensive Rating: ', DRtg,
'</br> Wins: ', W)
)
return (graph)
}
library(plotly)
getwd()
data <- read.csv("2014-15team.csv")
data <- read.csv("../data/2014-15team.csv")
dataset <- read.csv("../data/2014-15team.csv")
graph <- plot_ly(
dataset, x = ~dataset$ORtg, y = ~dataset$DRtg,
color = ~Tm, size = ~W, type = 'scatter',
mode = 'markers', hoverinfo = 'text',
text = ~paste('Team Name: ', Team,
'</br> Offensive Rating: ', ORtg,
'</br> Deffensive Rating: ', DRtg,
'</br> Wins: ', W)
)
graph
player <- read.csv('./data/2014-15playerpergame.csv', stringsAsFactors = FALSE)
advanced <- read.csv('./data/2014-15advanced.csv', stringsAsFactors = FALSE)
team <- read.csv('./data/2014-15team.csv', stringsAsFactors = FALSE)
player.joined <- left_join(player,advanced, by=c("Player", "Tm"))
dataset<- left_join(player.joined,team, by="Tm")
player <- read.csv('../data/2014-15playerpergame.csv', stringsAsFactors = FALSE)
advanced <- read.csv('../data/2014-15advanced.csv', stringsAsFactors = FALSE)
team <- read.csv('../data/2014-15team.csv', stringsAsFactors = FALSE)
player.joined <- left_join(player,advanced, by=c("Player", "Tm"))
dataset<- left_join(player.joined,team, by="Tm")
newdata <- filter(dataset, G.x > 41) %>%
group_by(Tm) %>%
filter(PS.G == max(PS.G))
p <- plot_ly(
dataset, x = ~newdata$ps.g, y = ~newdata$eFG.,
color = ~Tm, size = ~W
)
p
p <- plot_ly(
newdata, x = ~newdata$ps.g, y = ~newdata$eFG.,
color = ~Tm, size = ~W
)
p
library(dplyr)
library(plotly)
newdata <- filter(dataset, G.x > 41) %>%
group_by(Tm) %>%
filter(PS.G == max(PS.G))
p <- plot_ly(
newdata, x = ~newdata$PS.G, y = ~newdata$eFG.,
color = ~Tm, size = ~W
)
p
p <- plot_ly(
newdata, x = ~newdata$PS.G, y = ~newdata$eFG.,
color = ~Tm, size = ~W
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Points Per Game: ', PS.G,
'</br> Effective Field Goal Percentage: ', EF.G,
'</br> Wins: ', W)
)
p <- plot_ly(
newdata, x = ~newdata$PS.G, y = ~newdata$eFG.,
color = ~Team, size = ~W
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Points Per Game: ', PS.G,
'</br> Effective Field Goal Percentage: ', EF.G,
'</br> Wins: ', W)
)
p
p <- plot_ly(
newdata, x = ~newdata$PS.G, y = ~newdata$eFG.,
color = ~Team, size = ~W,
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Points Per Game: ', PS.G,
'</br> Effective Field Goal Percentage: ', EF.G,
'</br> Wins: ', W)
)
p
p <- plot_ly(
newdata, x = ~newdata$PS.G, y = ~newdata$eFG.,
color = ~Team, size = ~W,
mode = 'markers', hoverinfo = 'text',
text = ~paste('Player: ', Player,
'</br> Points Per Game: ', PS.G,
'</br> Effective Field Goal Percentage: ', eFG.,
'</br> Wins: ', W)
)
p
